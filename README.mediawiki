This is a datalogger web service I wrote in 2010.  I built this in C# using VS2008.


== C# .NET Web Service ==

This is a very simple design for inserting records.  It was written in C#.  

It has room for improvement, obviously.

The general idea is to:
* first retrieve a new API Key with the genApiKey method
* use that apikey to insert and retrieve your data
* insesertLog method requires apikey, logvalue and adds timestamp based on insert time
* getLogsByApikeyHours retieves data for a given apikey for the most recent number of hours

=== Basic Calls ===

Web Services supporting the Tinaja Data Logging application.

* genApiKey - Generate an API key for use with data logging calls
* getAllLogs - Get all log entries as a collection of datalog objects
* getLogsByApikey - Get all log entries by apikey as a collection of datalog objects
* getLogsByApikeyHours - Get all log entries by apikey and for the last n number of hours, usually 24. For charting purposes.
* insertLog - Insert a data log record - apikey, logvalue


== The directories ==

* DataLogService - the code that does the logging and exposed the web service plus the data model (.edmx file)
* TinajaWinService - to set up an additional monitoring service to respond to web service issues
* TinajaWinServiceFormsApp - can't remember, sorry
* TinajaWinSerrviceSetup - the actial setup.exe/.msi files (not included)

== The Data ==

There is a .sql file added to recreate the database.  It is an autogenerated script from the SQL Server Manager.  

Also look at the file, DataLogServiceModel.edmx.


== Usage from Python ==

I use a python script to update sensor data into the SOAP based web service.  See the code in sample code at:
https://github.com/TinajaLabs/gateway_raspi/blob/master/allsensors.py

<pre>
# import the SOAP library - https://pypi.python.org/pypi/suds
from suds.client import Client

# log to the SOAP based Tinaja data logger service
def logtotinaja(lnSensorNum, lnLogVal, apiKey):

	# lnSensorNum - the number of the sensor, not used in the SOAP service
	# lnLogVal - the value to log
	# apiKey - the key generated from genApiKey

    if apiKey == "":
        return

    # print lnLogVal, apiKey
    try:
        insertResult = client.service.insertLog(apiKey, lnLogVal)

        # Inserted all right?
        if insertResult == "Inserted":
            what= ""
            # print "Data inserted OK"
            # print "Sensor# ", lnSensorNum, "logged ", lnLogVal, " to Tinaja data logger: ", apiKey

        else:
            print "Error:", insertResult
    except:
        print "Couldn't connect to ", TINAJALOGURL
        syslog.syslog("TLSM.logtotinaja exception: Couldn't connect to " + TINAJALOGURL)

</pre>

